<%- include("../../views/partials/admin/header") %>

<head>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
</head>

<style>
  .error-message {
    color: red;
  }

  .img-container {
    position: relative;
    display: inline-block;
    margin: 5px;
  }

  .img-container img {
    width: 120px;
    height: auto;
    max-height: 100px;
    object-fit: contain;
  }

  .img-container i {
    position: absolute;
    top: 0;
    right: 0;
    color: red;
    background: white;
    padding: 2px;
    border-radius: 50%;
    cursor: pointer;
  }

  #cropModal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
    z-index: 1001;
    text-align: center;
  }

  #cropModal img {
    max-width: 100%;
    max-height: 400px;
  }

  #overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    z-index: 1000;
  }
</style>

<section class="container justify-content-center">
  <div class="row justify-content-center">
    <div class="col-lg-6">
      <h3 class="fw-bold my-3">Edit product</h3>

      <div class="card mb-4">
        <div class="card-body">
          <form id="productForm">
            <div class="mb-4">
              <label class="form-label">Product Name</label>
              <input type="text" name="productName" id="product-name" class="form-control" value="<%= product.productName %>">
              <div id="productName-error" class="error-message"></div>
            </div>

            <div class="mb-4">
              <label class="form-label">Description</label>
              <textarea name="description" id="description" class="form-control"><%= product.description %></textarea>
              <div id="description-error" class="error-message"></div>
            </div>

            <div class="row">
              <div class="col-lg-6 mb-4">
                <label class="form-label">Regular Price</label>
                <input type="text" name="regularPrice" id="regular-price" class="form-control" value="<%= product.regularPrice %>">
                <div id="regularPrice-error" class="error-message"></div>
              </div>
              <div class="col-lg-6 mb-4">
                <label class="form-label">Sale Price</label>
                <input type="text" name="salePrice" id="sale-price" class="form-control" value="<%= product.salePrice %>">
                <div id="salePrice-error" class="error-message"></div>
              </div>
            </div>

            <div class="row">
              <div class="col-lg-6 mb-4">
                <label class="form-label">Category</label>
                <select name="category" id="category" class="form-select">
                  <option value="" disabled selected>Choose one</option>
                  <% category.forEach(cat => { %>
                    <option value="<%= cat.name %>"><%= cat.name %></option>
                  <% }) %>
                </select>
                <div id="category-error" class="error-message"></div>
              </div>
            </div>

            <div class="mb-3">
              <input type="file" id="imageInput" multiple accept="image/*" onchange="previewImages(event)">
              <div id="image-error" class="error-message"></div>
              <div id="previewContainer" class="d-flex flex-wrap mt-2">
                <% product.productImage.forEach((image) => { %>
                  <div class="img-container">
                    <img src="<%= image %>">
                    <i class="fas fa-times" onclick="deleteImage('<%= image %>', '<%= product._id %>')"></i>
                  </div>
                <% }) %>
              </div>
            </div>

            <div id="cropModal">
              <h4>Crop Image</h4>
              <img id="cropImage">
              <br><br>
              <button type="button" class="btn btn-outline-primary" onclick="saveCroppedImage()">Crop & Save</button>
              <button type="button" class="btn btn-outline-secondary" onclick="closeCropModal()">Cancel</button>
            </div>

            <input class="btn btn-outline-primary my-4" type="submit" value="Update Product" onclick="validateAndSubmit(event,'<%=product._id%>')">
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<div id="overlay"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
  let cropper;
  let newImages = []; // Store new cropped images
  let existingImages = [];
  let croppedImages = [];




function previewImages(event) {
  const files = event.target.files;
  if (!files || files.length === 0) return;

  [...files].forEach(file => {
    const reader = new FileReader();
    reader.onload = (e) => {
      document.getElementById('cropImage').src = e.target.result;
      document.getElementById('cropModal').style.display = "block";
      document.getElementById('overlay').style.display = "block";

      cropper = new Cropper(document.getElementById('cropImage'), {
        aspectRatio: 1,
        viewMode: 1,
      });
    };
    reader.readAsDataURL(file);
  });

  event.target.value = "";
}


function saveCroppedImage() {
  if (!cropper) {
    alert("No image selected for cropping!");
    return;
  }

  cropper.getCroppedCanvas().toBlob(blob => {
    if (!blob) {
      alert("Failed to crop image. Try again.");
      return;
    }

    let file = new File([blob], `cropped_${Date.now()}.jpg`, { type: "image/jpeg" });
    newImages.push(file); // ✅ Store new image properly

    // ✅ Display preview of cropped image
    const previewContainer = document.getElementById('previewContainer');
    const div = document.createElement("div");
    div.className = "img-container";

    const img = document.createElement("img");
    img.src = URL.createObjectURL(file);

    const i = document.createElement("i");
    i.className = "fas fa-times";
    i.onclick = () => {
      newImages = newImages.filter(f => f !== file);
      div.remove();
    };

    div.appendChild(img);
    div.appendChild(i);
    previewContainer.appendChild(div);

    closeCropModal();
  }, "image/jpeg"); // ✅ Ensure correct format
}



  function closeCropModal() {
    document.getElementById('cropModal').style.display = "none";
    document.getElementById('overlay').style.display = "none";
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  }

  function deleteImage(imageName, productId) {
    fetch('/admin/deleteImage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ imageNameToServer: imageName, productIdToServer: productId })
    })
    .then(res => res.json())
    .then(data => {
      if (data.status) location.reload();
      else alert("Image deletion failed");
    });
  }

  function validateAndSubmit(event, productId) {
  event.preventDefault();
  if (!validateForm()) return;

  const form = document.getElementById('productForm');
  const formData = new FormData(form);

  // Append existing images so they are not lost
  existingImages.forEach((image) => {
    formData.append('existingImages[]', image);
  });

  // Append new cropped images (as files)
  newImages.forEach((file) => {
    formData.append('newImages', file);
  });

  console.log('submittng data..')

  fetch(`/editProduct/${productId}`, { 
    method: 'POST',
    body: formData
})
.then(response => response.text()) // Change from .json() to .text()
.then(text => {
    console.log("Server response:", text);
    return JSON.parse(text); // Manually parse JSON if needed
})
.catch(error => console.error("Error:", error));
}


  function validateForm() {
    let isValid = true;
    clearErrorMessages();

    const name = document.getElementById('product-name').value.trim();
    const desc = document.getElementById('description').value.trim();
    const regular = document.getElementById('regular-price').value.trim();
    const sale = document.getElementById('sale-price').value.trim();
    const category = document.getElementById('category').value;

    if (!name || !/^[a-zA-Z\s]+$/.test(name)) {
      showError("productName-error", "Enter a valid name");
      isValid = false;
    }
    if (!desc) {
      showError("description-error", "Enter description");
      isValid = false;
    }
    if (!regular || isNaN(regular) || parseFloat(regular) < 0) {
      showError("regularPrice-error", "Invalid regular price");
      isValid = false;
    }
    if (!sale || isNaN(sale) || parseFloat(sale) < 0) {
      showError("salePrice-error", "Invalid sale price");
      isValid = false;
    }
    if (!category) {
      showError("category-error", "Select category");
      isValid = false;
    }

    return isValid;
  }

  function showError(id, message) {
    document.getElementById(id).innerText = message;
  }

  function clearErrorMessages() {
    document.querySelectorAll('.error-message').forEach(el => el.innerText = '');
  }
</script>

