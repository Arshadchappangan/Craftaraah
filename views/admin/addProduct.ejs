<%- include("../../views/partials/admin/header") %>

    <head>
        <!-- Cropper.js CSS -->
        <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    </head>

    <style>
        .error-message {
            color: red;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }

        .thumbnail {
            margin-right: 10px;
        }

        /* Crop Modal Styling */
        #cropModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
            z-index: 1001;
            text-align: center;
        }

        #cropModal img {
            max-width: 100%;
            max-height: 400px;
        }

        #overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 1000;
        }
    </style>

    <section class="container justify-content-center">
        <div class="row justify-content-center">
            <div class="col-9">
                <h3 class="fw-bold my-3">Add new product</h3>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="row">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" placeholder="Type here" name="productName"
                                        class="form-control border" id="product-name">
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="mb-4">
                                    <label class="form-label">Full description</label>
                                    <textarea placeholder="Type here" id="description" name="description"
                                        class="form-control border" rows="4"></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6 mb-4">
                                    <label for="product_name" class="form-label">Regular Price</label>
                                    <input type="text" placeholder="₹" name="regulaPrice" class="form-control border"
                                        id="regular-price">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <label for="product_name" class="form-label">Sale Price</label>
                                    <input type="text" placeholder="₹" name="salePrice" class="form-control border"
                                        id="sale-price">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6 mb-4">
                                    <label for="product_name" class="form-label">Quantity</label>
                                    <input type="text" placeholder="" name="quantity" class="form-control border"
                                        id="quantity">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <label for="product_name" class="form-label">Category</label>
                                    <select class="form-select border" name="category">
                                        <option value="" disabled selected>Choose one</option>
                                        <%for(let i=0;i<category.length;i++){%>
                                            <option value="<%=category[i].name%>">
                                                <%=category[i].name%>
                                            </option>
                                            <%}%>
                                    </select>

                                    <div id="category-error" class="error-message"></div>
                                </div>
                            </div>





                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>

                                <input type="file" id="imageInput" multiple accept="image/png, image/jpeg, image/jpg"
                                    onchange="previewImages(event)">
                                <div id="previewContainer" class="d-flex flex-wrap mt-2"></div>
                                <div id="cropModal">
                                    <h4>Preview & Crop</h4>
                                    <img id="cropImage">
                                    <br><br>
                                    <button class="btn btn-outline-primary" onclick="saveCroppedImage()">Crop &
                                        Save</button>
                                    <button class="btn btn-outline-secondary" onclick="closeCropModal()">Cancel</button>
                                </div>
                            </div>
                    </div>
                    <div>
                        <input class="btn btn-md rounded font-sm hover-up" type="submit" value="Publish">
                    </div>
                    </form>
                </div>
            </div>
        </div>
        </div>
    </section>

    <div id="overlay"></div>



    <!-- Cropper.js JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>


    <script>
        let cropper;
        let currentImageElement;

        function previewImages(event) {
            const previewContainer = document.getElementById('previewContainer');
            previewContainer.innerHTML = "";

            const files = event.target.files;

            Array.from(files).forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgElement = document.createElement("img");
                    imgElement.src = e.target.result;
                    imgElement.classList.add("img-thumbnail");
                    imgElement.style.height = "auto";
                    imgElement.style.width = "120px";
                    imgElement.style.maxHeight = "100px";
                    imgElement.style.objectFit = "contain";
                    imgElement.style.margin = "5px";
                    imgElement.onclick = () => openCropper(imgElement, e.target.result);

                    previewContainer.appendChild(imgElement);
                };
                reader.readAsDataURL(file);
            });
        }


        function openCropper(imgElement, imageSrc) {
            currentImageElement = imgElement;
            const cropImage = document.getElementById('cropImage');

            // Remove any previous event listener
            cropImage.onload = null;

            // Wait until image loads before initializing Cropper
            cropImage.onload = function () {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }

                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                    movable: true,
                    rotatable: true,
                    scalable: true,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                });

                console.log("✅ Cropper initialized successfully.");
            };

            cropImage.src = imageSrc; // Set the image source
            document.getElementById('cropModal').style.display = "block";
            document.getElementById('overlay').style.display = "block";
        }




        function saveCroppedImage() {
            if (!cropper) {
                console.error("Cropper is not initialized!");
                return;
            }

            cropper.getCroppedCanvas().toBlob((blob) => {
                if (!blob) {
                    console.error("Failed to create cropped image blob.");
                    return;
                }

                const croppedImageURL = URL.createObjectURL(blob);

                // Replace the original preview image with the cropped image
                currentImageElement.src = croppedImageURL;

                // Hide the crop modal
                document.getElementById('cropModal').style.display = "none";
                document.getElementById('overlay').style.display = "none";

                // Destroy Cropper instance after cropping
                cropper.destroy();
                cropper = null;
            });
        }



        function closeCropModal() {
            document.getElementById('cropModal').style.display = "none";
            document.getElementById('overlay').style.display = "none";

            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }



        function validateForm() {
            clearErrorMessages();
            const name = document.getElementById('product-name').value.trim();
            const description = document.getElementById('description').value.trim();
            const regularPrice = document.getElementById('regular-price').value;
            const salePrice = document.getElementById('sale-price').value;
            const quantity = document.getElementById('quantity').value;
            let isValid = true;

            if (name === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage('description-error', 'Please enter the description for product.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(description)) {
                displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (parseFloat(regularPrice) <= parseFloat(salePrice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                isValid = false;
            }

            if (parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
            });
        }
    </script>